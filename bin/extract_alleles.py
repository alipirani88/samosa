from __future__ import division
import sys
import argparse
import re
import os
import csv
from cyvcf2 import VCF
import subprocess
from collections import OrderedDict
from collections import defaultdict
from collections import defaultdict
import pandas as pd
import glob
import readline
import pandas as pd
import numpy as np
import timeit
import time
import gc
import datetime
from collections import Counter



# Parse Command line Arguments
parser = argparse.ArgumentParser(description='This script will parse Freebayes, GATK Mutect 2 and Instrain vcf/snv file and extract allele frequency for the called variants')
required = parser.add_argument_group('Required arguments')
optional = parser.add_argument_group('Optional arguments')
required.add_argument('-Freebayes_vcf', action='store', dest="Freebayes_vcf",
                      help='Freebayes VCF file')
required.add_argument('-Mutect_vcf', action='store', dest="Mutect_vcf",
                      help='GATK Mutect2 VCF file')
required.add_argument('-instrain_vcf', action='store', dest="instrain_vcf",
                      help='instrain SNV file')
required.add_argument('-LDV_abund_frequency', action='store', dest="Final_LDV_abund_frequency",
                      help='LDV abundance frequency file generated for each instrain vcf by Samosa pipeline (found under extract_allele folder)')
required.add_argument('-LDV_by_node', action='store', dest="LDV_by_node",
                      help='LDV_by_node Matrix file generated by Joyce R scripts - 2021_08_05_MI_Rush_LDV_diagnosis_ali.Rmd and 2021_06_26_R01_figuresAB_updated_metagenome_data.Rmd')
required.add_argument('-Genomes_in_node', action='store', dest="Genomes_in_node",
                      help='Genomes in each node matrix file generated by Joyce R scripts - 2021_08_05_MI_Rush_LDV_diagnosis_ali.Rmd and 2021_06_26_R01_figuresAB_updated_metagenome_data.Rmd')
required.add_argument('-Metagenome_to_Genome', action='store', dest="Metagenome_to_Genome",
                      help='Metagenome to Genomes well map metadata file generated by Joyce R scripts - 2021_08_05_MI_Rush_LDV_diagnosis_ali.Rmd and 2021_06_26_R01_figuresAB_updated_metagenome_data.Rmd. Use real_well_position column.')

args = parser.parse_args()


def extract_freebayes():
    LDV_abund_file = "%s" % args.Freebayes_vcf.replace('_raw.vcf', '_LDV_abund_frequency.csv')
    fp = open(LDV_abund_file, 'w+')
    fp.write("LDV Position, Strain Position, Reference Allele, Reference Allele Frequency, ALT Allele, ALT Allele Frequency, REF allele Depth, ALT Allele Depth\n")
    
    # Read Freebayes VCF file with cyvcf
    vcf = VCF('%s' % args.Freebayes_vcf)

    # Start the counter to count statistics
    freebayes_single_allele_snp_count = 0
    freebayes_multi_allele_snp_count = 0
    freebayes_multi_snp_positions = []
    freebayes_dict = defaultdict(list)
    freebayes_AF_dict = {}

    for v in vcf:
        key = v.POS
        if int(v.INFO.get('NUMALT')) == 0 and int(v.INFO.get('DP')) > 0:
            ALT_allele = "."
            Alt_allele_freq = 0
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = 0
            # No need to write these positions. Only reference allele called.
            #fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth))

        elif int(v.INFO.get('NUMALT')) == 1 and int(v.INFO.get('DP')) > 0:
            freebayes_single_allele_snp_count += 1
            ALT_allele = v.ALT[0]
            Alt_allele_freq = int(v.INFO.get('AO')) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO'))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth)

        elif int(v.INFO.get('NUMALT')) == 2 and int(v.INFO.get('DP')) > 0:
            # print "NUMALT > 1")
            # print str(v.INFO.get('AO')[1]))
            freebayes_multi_allele_snp_count += 1
            freebayes_multi_snp_positions.append(v.POS)
            # Calculate Allele Frequency of first ALT allele
            ALT_allele_1 = v.ALT[0]
            Alt_allele_freq_1 = int(v.INFO.get('AO')[0]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[0])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_1)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of second ALT allele
            ALT_allele_2 = v.ALT[1]
            Alt_allele_freq_2 = int(v.INFO.get('AO')[1]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[1])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_2)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            alt_allele_depth)

        elif int(v.INFO.get('NUMALT')) == 3 and int(v.INFO.get('DP')) > 0:
            freebayes_multi_allele_snp_count += 1
            freebayes_multi_snp_positions.append(v.POS)
            # Calculate Allele Frequency of first ALT allele
            ALT_allele_1 = v.ALT[0]
            Alt_allele_freq_1 = int(v.INFO.get('AO')[0]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[0])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_1)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of second ALT allele
            ALT_allele_2 = v.ALT[1]
            Alt_allele_freq_2 = int(v.INFO.get('AO')[1]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[1])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_2)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of third ALT allele
            ALT_allele_3 = v.ALT[2]
            Alt_allele_freq_3 = int(v.INFO.get('AO')[2]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[2])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_3)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
            alt_allele_depth)

        elif int(v.INFO.get('NUMALT')) == 4 and int(v.INFO.get('DP')) > 0:
            freebayes_multi_allele_snp_count += 1
            freebayes_multi_snp_positions.append(v.POS)
            # Calculate Allele Frequency of first ALT allele
            ALT_allele_1 = v.ALT[0]
            Alt_allele_freq_1 = int(v.INFO.get('AO')[0]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[0])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_1)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of second ALT allele
            ALT_allele_2 = v.ALT[1]
            Alt_allele_freq_2 = int(v.INFO.get('AO')[1]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[1])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_2)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of third ALT allele
            ALT_allele_3 = v.ALT[2]
            Alt_allele_freq_3 = int(v.INFO.get('AO')[2]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[2])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_3)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of third ALT allele
            ALT_allele_4 = v.ALT[3]
            Alt_allele_freq_4 = int(v.INFO.get('AO')[3]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[3])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_4, Alt_allele_freq_4, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_4)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_4, Alt_allele_freq_4, reference_depth,
            alt_allele_depth)

        elif int(v.INFO.get('NUMALT')) == 5 and int(v.INFO.get('DP')) > 0:
            freebayes_multi_allele_snp_count += 1
            freebayes_multi_snp_positions.append(v.POS)
            # Calculate Allele Frequency of first ALT allele
            ALT_allele_1 = v.ALT[0]
            Alt_allele_freq_1 = int(v.INFO.get('AO')[0]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[0])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_1)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of second ALT allele
            ALT_allele_2 = v.ALT[1]
            Alt_allele_freq_2 = int(v.INFO.get('AO')[1]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[1])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_2)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of third ALT allele
            ALT_allele_3 = v.ALT[2]
            Alt_allele_freq_3 = int(v.INFO.get('AO')[2]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[2])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_3)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of third ALT allele
            ALT_allele_4 = v.ALT[3]
            Alt_allele_freq_4 = int(v.INFO.get('AO')[3]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[3])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_4, Alt_allele_freq_4, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_4)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_4, Alt_allele_freq_4, reference_depth,
            alt_allele_depth)

            # Calculate Allele Frequency of third ALT allele
            ALT_allele_5 = v.ALT[4]
            Alt_allele_freq_5 = int(v.INFO.get('AO')[4]) / int(v.INFO.get('DP'))
            Reference_allele = v.REF
            Reference_allele_freq = int(v.INFO.get('RO')) / int(v.INFO.get('DP'))
            total_depth = int(v.INFO.get('DP'))
            reference_depth = int(v.INFO.get('RO'))
            alt_allele_depth = int(v.INFO.get('AO')[4])
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            # key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_5, Alt_allele_freq_5, reference_depth, alt_allele_depth))
            freebayes_dict[v.POS].append(ALT_allele_5)
            freebayes_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_5, Alt_allele_freq_5, reference_depth,
            alt_allele_depth)

    print ("Number of Positions with Single SNP allele in Freebayes vcf - %s" % freebayes_single_allele_snp_count)
    print ("Number of Positions with Multiple SNP allele in Freebayes vcf - %s" % freebayes_multi_allele_snp_count)
    fp.close()
    return freebayes_dict, freebayes_AF_dict

def extract_instrain():
    #LDV_abund_file = "%s" % args.instrain_vcf.replace('_instrain_SNVs.tsv', '_LDV_abund_frequency.csv')
    LDV_abund_file = args.Final_LDV_abund_frequency
    fp = open(LDV_abund_file, 'w+')
    #vcf = VCF('%s' % args.instrain_vcf)
    fp.write("LDV Position, Strain Position, Reference Allele, Reference Allele Frequency, ALT Allele, ALT Allele Frequency, REF allele Depth, ALT Allele Depth, class\n")

    instrain_single_allele_snp_count = 0
    instrain_multi_allele_snp_count = 0
    instrain_multi_snp_positions = []
    instrain_dict = defaultdict(list)
    instrain_AF_dict = {}

    df = pd.read_csv("%s" % args.instrain_vcf, sep='\t', header=0, dtype=str)
    for index, row in df.iterrows():
        key = row[1]

        if row[15] == "SNS" and int(row[3]) == 1:
            # When there is only one allele found and no reference base
            # The major allele - ALT allele is con_base
            instrain_single_allele_snp_count += 1
            ALT_allele = row[5]
            Alt_allele_freq = row[8]
            instrain_dict[row[1]].append(ALT_allele)
            Reference_allele = row[4]
            Reference_allele_freq = row[7]
            total_depth = row[2]
            reference_depth = float(Reference_allele_freq) * float(total_depth)
            alt_allele_depth = float(Alt_allele_freq) * float(total_depth)
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            # key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            # alt_allele_depth)
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth, row[15]))
            instrain_AF_dict[row[1]] = "%s,%s,%s,%s,%s,%s,%s,%s,%s" % (key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth, row[15])

        elif row[15] == "SNV" and int(row[3]) > 1:
            # when there is more than one allele found, and con_base equal ref_base equal major allele
            if row[4] != row[5]:
                print ("Warning: Con base is not equal to ref base")
                exit()
            instrain_multi_allele_snp_count += 1
            instrain_multi_snp_positions.append(row[1])
            Reference_allele = row[4]
            Reference_allele_freq = row[7]
            ALT_allele = row[6]
            Alt_allele_freq = row[9]
            instrain_dict[row[1]].append(ALT_allele)
            total_depth = row[2]
            reference_depth = float(Reference_allele_freq) * float(total_depth)
            alt_allele_depth = float(Alt_allele_freq) * float(total_depth)
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            #     alt_allele_depth)
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            alt_allele_depth, row[15]))
            instrain_AF_dict[row[1]] = "%s,%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            alt_allele_depth, row[15])


        elif row[15] == "con_SNV" and int(row[3]) > 1:
            # when there is more than one allele found, and con_base is not equal to ref_base.
            # Major allele is con base
            if row[4] == row[5]:
                print ("Warning: Con base should not be equal to ref base")
                exit()
            instrain_multi_allele_snp_count += 1
            instrain_multi_snp_positions.append(row[1])
            Reference_allele = row[4]
            Reference_allele_freq = row[7]
            ALT_allele = row[5]
            Alt_allele_freq = row[8]
            instrain_dict[row[1]].append(ALT_allele)
            total_depth = row[2]
            reference_depth = float(Reference_allele_freq) * float(total_depth)
            alt_allele_depth = float(Alt_allele_freq) * float(total_depth)
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            #     alt_allele_depth)
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            alt_allele_depth, row[15]))
            instrain_AF_dict[row[1]] = "%s,%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            alt_allele_depth, row[15])


        elif row[15] == "pop_SNV" and int(row[3]) > 1:
            # when there is more than one allele found, and con_base is not equal to ref_base.
            # Major allele is con base, minor allele is var base
            if row[4] == row[5]:
                print ("Warning: Con base should not be equal to ref base")
                exit()
            instrain_multi_allele_snp_count += 1
            instrain_multi_snp_positions.append(row[1])
            Reference_allele = row[4]
            Reference_allele_freq = row[7]
            ALT_allele = row[5]
            Alt_allele_freq = row[8]
            instrain_dict[row[1]].append(ALT_allele)
            total_depth = row[2]
            reference_depth = float(Reference_allele_freq) * float(total_depth)
            alt_allele_depth = float(Alt_allele_freq) * float(total_depth)
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            #     alt_allele_depth)
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            alt_allele_depth, row[15]))
            instrain_AF_dict[row[1]] = "%s,%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, row[1], Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth,
            alt_allele_depth, row[15])

            ALT_allele_1 = row[6]
            Alt_allele_freq_1 = row[9]
            instrain_dict[row[1]].append(ALT_allele_1)
            total_depth = row[2]
            reference_depth = float(Reference_allele_freq) * float(total_depth)
            alt_allele_depth_1 = float(Alt_allele_freq_1) * float(total_depth)
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, row[1], Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
            #     alt_allele_depth_1)
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, row[1], Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth_1, row[15]))
            instrain_AF_dict[row[1]] = "%s,%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, row[1], Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
                alt_allele_depth_1, row[15])
        elif row[15] == "DivergentSite" and int(row[3]) == 0:
            continue
        elif row[15] == "AmbiguousReference":
            continue
        else:
                print ("Unknown class")
                print (row)
                exit()

    print ("Number of Positions with Single SNP allele in Instrain SNV - %s" % instrain_single_allele_snp_count)
    print ("Number of Positions with Multiple SNP allele in Instrain SNV - %s" % instrain_multi_allele_snp_count)
    fp.close()
    return instrain_dict, instrain_AF_dict, LDV_abund_file

def extract_gatk_Mutect():
    LDV_abund_file = "%s" % args.Mutect_vcf.replace('_raw.vcf', 'GATK_Mutect2_LDV_abund_frequency.csv')
    fp = open(LDV_abund_file, 'w+')
    vcf = VCF('%s' % args.Mutect_vcf)
    fp.write(
        "LDV Position, Strain Position, Reference Allele, Reference Allele Frequency, ALT Allele, ALT Allele Frequency, REF allele Depth, ALT Allele Depth\n")
    gatk_single_allele_snp_count = 0
    gatk_multi_allele_snp_count = 0
    gatk_multi_snp_positions = []
    gatk_dict = defaultdict(list)
    gatk_AF_dict = {}
    for v in vcf:
        key = v.POS
        alt = v.ALT
        if len(alt) == 1 and alt[0] == "<NON_REF>":
            ALT_allele = "."
            Alt_allele_freq = 0
            Reference_allele = v.REF
            total_depth = int(v.format('DP'))
            if int(v.format('DP')) == 0:
                Reference_allele_freq = 0
                alt_allele_depth = 0
                reference_depth = 0
            elif int(v.format('DP')) > 0:
                Reference_allele_freq = int(v.format('DP')) / int(v.format('DP'))
                reference_depth = int(v.format('DP'))
                alt_allele_depth = 0
            #print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth))
            #fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth))
        elif len(alt) == 2:
            gatk_single_allele_snp_count += 1
            ALT_allele = v.ALT[0]
            Reference_allele = v.REF
            AD_array = (((((str(v.format('AD'))).replace('  ', ' ')).replace('[ ', '[')).replace('[', '')).replace(']', '')).split(' ')
            AD_array = list(filter(None, AD_array))
            # Some format issues with GATK Mutect vcf file
            if len(AD_array) > 3:
                while('' in AD_array) :
                    AD_array.remove("")
            if int(v.format('DP')) == 0:
                total_depth = int(v.format('DP'))
                Reference_allele_freq = 0
                alt_allele_depth = 0
                reference_depth = 0
                alt_allele_depth = 0
            elif int(v.format('DP')) > 0:
                total_depth = int(v.format('DP'))
                Reference_allele_freq = int(AD_array[0]) / total_depth
                alt_allele_depth = int(AD_array[1])
                Alt_allele_freq = int(AD_array[1]) / total_depth
            #print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth))
            gatk_dict[v.POS].append(ALT_allele)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele, Alt_allele_freq, reference_depth, alt_allele_depth)

        elif len(alt) == 3:
            gatk_multi_allele_snp_count += 1
            gatk_multi_snp_positions.append(v.POS)
            Reference_allele = v.REF
            AD_array = (((((str(v.format('AD'))).replace('  ', ' ')).replace('[ ', '[')).replace('[', '')).replace(']', '')).split(' ')
            AD_array = list(filter(None, AD_array))
            if int(v.format('DP')) == 0:
                print ("Warning - Depth at %s was 0. Please check the VCF file - %s" % (v.POS, args.Mutect_vcf))
                total_depth = 1
                # exit()
            else:
                total_depth = int(v.format('DP'))
            Reference_allele_freq = int(AD_array[0]) / total_depth
            alt_allele_depth_1 = int(AD_array[1])
            Alt_allele_freq_1 = int(AD_array[1]) / total_depth
            ALT_allele_1= v.ALT[0]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            # key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth_1))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,alt_allele_depth_1))
            gatk_dict[v.POS].append(ALT_allele_1)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
                alt_allele_depth_1)
            
            alt_allele_depth_2 = int(AD_array[2])
            Alt_allele_freq_2 = int(AD_array[2]) / total_depth
            ALT_allele_2 = v.ALT[1]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,alt_allele_depth_2))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            alt_allele_depth_2))
            gatk_dict[v.POS].append(ALT_allele_2)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
                alt_allele_depth_2)

        elif len(alt) == 4:
            gatk_multi_allele_snp_count += 1
            gatk_multi_snp_positions.append(v.POS)
            Reference_allele = v.REF
            AD_array = (((((str(v.format('AD'))).replace('  ', ' ')).replace('[ ', '[')).replace('[', '')).replace(']', '')).split(' ')
            AD_array = list(filter(None, AD_array))
            if int(v.format('DP')) == 0:
                print ("Warning - Depth at %s was 0. Please check the VCF file - %s" % (v.POS, args.Mutect_vcf))
                total_depth = 1
                # exit()
            else:
                total_depth = int(v.format('DP'))
            Reference_allele_freq = int(AD_array[0]) / total_depth
            alt_allele_depth_1 = int(AD_array[1])
            Alt_allele_freq_1 = int(AD_array[1]) / total_depth
            ALT_allele_1= v.ALT[0]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            # key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth_1))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,alt_allele_depth_1))
            gatk_dict[v.POS].append(ALT_allele_1)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
                alt_allele_depth_1)

            alt_allele_depth_2 = int(AD_array[2])
            Alt_allele_freq_2 = int(AD_array[2]) / total_depth
            ALT_allele_2 = v.ALT[1]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            #     alt_allele_depth_2))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            alt_allele_depth_2))
            gatk_dict[v.POS].append(ALT_allele_2)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
                alt_allele_depth_2)

            alt_allele_depth_3 = int(AD_array[3])
            Alt_allele_freq_3 = int(AD_array[3]) / total_depth
            ALT_allele_3 = v.ALT[2]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
            #     alt_allele_depth_3))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
                alt_allele_depth_3))
            gatk_dict[v.POS].append(ALT_allele_3)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
                alt_allele_depth_3)

        elif len(alt) == 5:
            gatk_multi_allele_snp_count += 1
            gatk_multi_snp_positions.append(v.POS)
            Reference_allele = v.REF
            AD_array = (((((str(v.format('AD'))).replace('  ', ' ')).replace('[ ', '[')).replace('[', '')).replace(']', '')).split(' ')
            AD_array = list(filter(None, AD_array))
            if int(v.format('DP')) == 0:
                print ("Warning - Depth at %s was 0. Please check the VCF file - %s" % (v.POS, args.Mutect_vcf))
                total_depth = 1
                # exit()
            else:
                total_depth = int(v.format('DP'))
            Reference_allele_freq = int(AD_array[0]) / total_depth
            alt_allele_depth_1 = int(AD_array[1])
            Alt_allele_freq_1 = int(AD_array[1]) / total_depth
            ALT_allele_1 = v.ALT[0]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            # key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth, alt_allele_depth_1))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
            alt_allele_depth_1))
            gatk_dict[v.POS].append(ALT_allele_1)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_1, Alt_allele_freq_1, reference_depth,
                alt_allele_depth_1)

            alt_allele_depth_2 = int(AD_array[2])
            Alt_allele_freq_2 = int(AD_array[2]) / total_depth
            ALT_allele_2 = v.ALT[1]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
            #     alt_allele_depth_2))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
                alt_allele_depth_2))
            gatk_dict[v.POS].append(ALT_allele_2)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_2, Alt_allele_freq_2, reference_depth,
                alt_allele_depth_2)

            alt_allele_depth_3 = int(AD_array[3])
            Alt_allele_freq_3 = int(AD_array[3]) / total_depth
            ALT_allele_3 = v.ALT[2]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
            #     alt_allele_depth_3))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
                alt_allele_depth_3))
            gatk_dict[v.POS].append(ALT_allele_3)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
                alt_allele_depth_3)

            alt_allele_depth_4 = int(AD_array[4])
            Alt_allele_freq_4 = int(AD_array[4]) / total_depth
            ALT_allele_4 = v.ALT[3]
            # print "%s,%s,%s,%s,%s,%s,%s,%s\n" % (
            #     key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_3, Alt_allele_freq_3, reference_depth,
            #     alt_allele_depth_3))
            fp.write("%s,%s,%s,%s,%s,%s,%s,%s\n" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_4, Alt_allele_freq_4, reference_depth,
                alt_allele_depth_4))
            gatk_dict[v.POS].append(ALT_allele_4)
            gatk_AF_dict[v.POS] = "%s,%s,%s,%s,%s,%s,%s,%s" % (
                key, v.POS, Reference_allele, Reference_allele_freq, ALT_allele_4, Alt_allele_freq_4, reference_depth,
                alt_allele_depth_4)

        elif len(alt) == 6:
            print ("More than 5 alleles found at Position %s. Please add a rule to the source code" % key)
            #exit()
    print ("Number of Positions with Single SNP allele in GATK Mutect vcf - %s" % gatk_single_allele_snp_count)
    print ("Number of Positions with Multiple SNP allele in GATK Mutect vcf - %s" % gatk_multi_allele_snp_count)

    #print sorted(gatk_multi_snp_positions)
    return gatk_dict, gatk_AF_dict

# Hardcoded - Not used/Deprecated
def compare_variant_calls():
    reference_genome_LDV_abund = "5261-4089-0-RVRE_Aus0004_with_metagenome_LDV_abund_frequency.csv"
    same_genome_LDV_abund = "5261-4089-0-RVRE_same_assembly_with_metagenome_LDV_abund_frequency.csv"
    reference_genome_LDV_abund_map = dict()
    with open("%s" % reference_genome_LDV_abund, 'rU') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        next(csv_reader, None)
        for row in csv_reader:
            if row[4] == ".":
                reference_genome_LDV_abund_map[row[0]] = (row[2])
            else:
                reference_genome_LDV_abund_map[row[0]] = (row[4])

    same_genome_LDV_abund_map = dict()
    count_not_found = 0
    with open("%s" % same_genome_LDV_abund, 'rU') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        next(csv_reader, None)
        for row in csv_reader:
            if row[1] != "Not found(Split/Unmap)":
                same_genome_LDV_abund_map[row[0]] = (row[2])
            elif row[1] == "Not found(Split/Unmap)":
                count_not_found += 1
    print ("Length of reference_genome_LDV_abund_map - %s" % len(reference_genome_LDV_abund_map))
    print ("Length of same_genome_LDV_abund - %s" % len(same_genome_LDV_abund_map))

    print ("Not found - %s" % count_not_found)


    for key in reference_genome_LDV_abund_map.keys():
        if key in same_genome_LDV_abund_map.keys():
            if reference_genome_LDV_abund_map[key] == same_genome_LDV_abund_map[key]:
                #continue
                print ("Match: %s, %s, %s" % (key, reference_genome_LDV_abund_map[key], same_genome_LDV_abund_map[key]))
            else:
                #continue
                if reference_genome_LDV_abund_map[key] == ".":
                    print ("Not a Match: %s, %s (No variant called for Aus), %s" % (key, reference_genome_LDV_abund_map[key], same_genome_LDV_abund_map[key]))
                else:
                    print ("Not a Match: %s, %s, %s" % (key, reference_genome_LDV_abund_map[key], same_genome_LDV_abund_map[key]))

        else:
            print ("Key Not found - %s" % key)

class Genotype(object):
    __slots__ = ('alleles', 'phased')

    def __init__(self, li):
        self.alleles = li[:-1]
        self.phased = li[-1]

    def __str__(self):
        sep = "/|"[int(self.phased)]
        return sep.join("0123."[a] for a in self.alleles)
    __repr__ = __str__

def common_member(a, b):
    a_set = set(a)
    b_set = set(b)

    # check length
    if len(a_set.intersection(b_set)) > 0:
        return (a_set.intersection(b_set))
    else:
        return ("no common elements")

#Methods to extract allele frequency 
gatk_dict, gatk_AF_dict  = extract_gatk_Mutect()

freebayes_dict, freebayes_AF_dict = extract_freebayes()

instrain_dict, instrain_AF_dict, LDV_abund_file = extract_instrain()

# Get variant positions from each vcf files
gatk_keys = list(gatk_dict.keys())
freebayes_keys = list(freebayes_dict.keys())
instrain_keys = list(instrain_dict.keys())
uniq_keys = gatk_keys + freebayes_keys + instrain_keys



# Start the counter for statistics
positions_called_by_all = 0
position_called_by_only_freebayes = 0
position_called_by_only_gatk = 0
position_called_by_only_instrain = 0
positions_called_by_all_and_same = 0
positions_called_by_all_but_different = 0


# Final_LDV_abund_file = "%s" % args.instrain_vcf.replace('_raw.vcf', '_Final_LDV_abund_frequency.csv')
# fp = open(Final_LDV_abund_file, 'w+')
# header = "LDV Position, Strain Position, Freebayes Reference Allele, Freebayes Reference Allele Frequency, Freebayes ALT Allele, Freebayes ALT Allele Frequency, Freebayes REF allele Depth, Freebayes ALT Allele Depth, LDV Position, Strain Position, GATK Mutect Reference Allele, GATK Mutect Reference Allele Frequency, GATK Mutect ALT Allele, GATK Mutect ALT Allele Frequency, GATK Mutect REF allele Depth, GATK Mutect ALT Allele Depth, LDV Position, Strain Position, Instrain Reference Allele, Instrain Reference Allele Frequency, Instrain ALT Allele, Instrain ALT Allele Frequency, Instrain REF allele Depth, Instrain ALT Allele Depth, Vote, Comment"
# header = "LDV Position, Strain Position, Instrain Reference Allele, Instrain Reference Allele Frequency, Instrain ALT Allele, Instrain ALT Allele Frequency, Instrain REF allele Depth, Instrain ALT Allele Depth"
# fp.write("%s\n" % header)


for position in uniq_keys:
    AF_string = ""
    if position in gatk_dict.keys() and position in freebayes_dict.keys() and position in instrain_dict.keys():
        positions_called_by_all += 1
        if str(gatk_dict[position]) == str(freebayes_dict[position]) == str(instrain_dict[position]):
            positions_called_by_all_and_same += 1
            #AF_string = "%s,%s,%s,%s,%s\n" % (freebayes_AF_dict[position], gatk_AF_dict[position], instrain_AF_dict[position], "3/3", "Same Allele in All")
            #print "%s, %s, %s" % (position, str(gatk_dict[position]), str(freebayes_dict[position]))
        else:
            #AF_string = "%s,%s,%s,%s,%s\n" % (freebayes_AF_dict[position], gatk_AF_dict[position], instrain_AF_dict[position], "3/3", "Different Allele")
            positions_called_by_all_but_different += 1
            #print "%s, %s, %s" % (position, str(gatk_dict[position]), str(freebayes_dict[position]))
    elif position in gatk_dict.keys() and position not in freebayes_dict.keys() and position not in instrain_AF_dict.keys():
        #AF_string = "%s,%s,%s,%s\n" % ("NA,NA,NA,NA,NA,NA,NA,NA", gatk_AF_dict[position], "1/3", "Called only in GATK Mutect2")
        position_called_by_only_gatk += 1

    elif position not in gatk_dict.keys() and position in freebayes_dict.keys() and position not in instrain_AF_dict.keys():
        #AF_string = "%s,%s,%s,%s\n" % (freebayes_AF_dict[position], "NA,NA,NA,NA,NA,NA,NA,NA", "1/3", "Called only in Freebayes")
        position_called_by_only_freebayes += 1
    elif position not in gatk_dict.keys() and position not in freebayes_dict.keys() and position in instrain_AF_dict.keys():
        AF_string = "%s\n" % (instrain_AF_dict[position])
        position_called_by_only_instrain += 1
    # fp.write("%s\n" % AF_string)

print ("####\nGeneral statistics - Positions called in each variant callers\n####")
print ("Total Number of positions called - %s" % len(uniq_keys))
print ("positions_called_by_all - %s" % positions_called_by_all)
print ("positions_called_by_all_and_same - %s" % positions_called_by_all_and_same)
print ("positions_called_by_all_but_different - %s" % positions_called_by_all_but_different)
print ("position_called_by_only_freebayes - %s" % position_called_by_only_freebayes)
print ("position_called_by_only_gatk - %s" % position_called_by_only_gatk)
print ("position_called_by_only_instrain - %s" % position_called_by_only_instrain)
print ("Analysis saved in - %s\n" % LDV_abund_file)


